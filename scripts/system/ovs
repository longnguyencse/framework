#!/usr/bin/env bash
# Copyright (C) 2016 iNuron NV
#
# This file is part of Open vStorage Open Source Edition (OSE),
# as available from
#
#      http://www.openvstorage.org and
#      http://www.openvstorage.com.
#
# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License v3 (GNU AGPLv3)
# as published by the Free Software Foundation, in version 3 as it comes
# in the LICENSE.txt file of the Open vStorage OSE distribution.
#
# Open vStorage is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY of any kind.

cd /opt/OpenvStorage
export DISPLAY=:0
export OVS_LOGTYPE_OVERRIDE=file

#Import Generic CLI code from extensions
source /usr/lib/python2.7/dist-packages/ovs_extensions/scripts/system/generic-code.sh

function show_help {
    echo "Open vStorage CLI launcher"
    echo "--------------------------"
    show_generic_help
    echo "  * Setup options:"
    echo "    - ovs setup [--rollback-on-failure]          Launch Open vStorage setup and autodetect required node role (master/extra) and optionally rollback if setup would fail"
    echo "    - ovs setup master [--rollback-on-failure]   Launch Open vStorage setup and install master node and optionally rollback if setup would fail"
    echo "    - ovs setup extra [--rollback-on-failure]    Launch Open vStorage setup and install extra node and optionally rollback if setup would fail"
    echo "    - ovs setup promote [--rollback-on-failure]  Promote this node (extra -> master) and optionally rollback if promote would fail"
    echo "    - ovs setup demote [--rollback-on-failure]   Demote this node (master -> extra) and optionally rollback if demote would fail"
    echo ""
    echo "  * Rollback options:"
    echo "    - ovs rollback                               Roll back a failed setup on this node"
    echo ""
    echo "  * Update options:"
    echo "    - ovs update <components>                    Update specified components on all nodes in cluster (comma-separated list)"
    echo ""
    echo "  * Remove options:"
    echo "    - ovs remove node <ip>                       Remove node from cluster"
    echo ""
    echo "  * Monitor options:"
    echo "    - ovs monitor mds                            Watch Open vStorage MDS clusters for all vPools per StorageRouter"
    echo "    - ovs monitor services                       Watch Open vStorage services"
    echo "    - ovs monitor heartbeat                      Send an internal heartbeat"
    echo ""
    echo "  * Services options:"
    echo "    - ovs stop framework [ip|all]                Stop Open vStorage Framework services on this node, on all nodes, or on the given ip"
    echo "    - ovs start framework [ip|all]               Start Open vStorage Framework services on this node, on all nodes, or on the given ip"
    echo ""
    echo "  * Configuration editing:"
    echo "    - ovs config edit some/key                   Opens the contents of 'some/key' in your EDITOR, and updates it after editing"
    echo "    - ovs config list [some]                     Lists all keys [under 'some']"
    echo "    - ovs config list-recursive [some]           Lists all keys recursively [under 'some']"
    echo "    - ovs config get some/key                    Prints the contents of 'some/key'"
    echo ""
    echo "  * Custom Open vStorage modules:"
    echo "    - ovs <modulename> <arguments>               Execute a custom Open vStorage module in /opt/OpenvStorage/scripts/"
    echo ""
    echo "  * Run automated local update:"
    echo "    - ovs local_update alba                      Execute a local update of alba and its dependencies"
    echo "    - ovs local_update volumedriver              Execute a local update of the volumedriver"
    echo ""
}

if [ "$1" = "help" ] ; then
    show_help
elif [ "$1" = "setup" ] ; then
    if [ "$#" -lt 2 ] ; then
        python -c "from ovs.lib.nodeinstallation import NodeInstallationController; NodeInstallationController.setup_node()"
    elif [ "$2" = "--rollback-on-failure" ] ; then
        python -c "from ovs.lib.nodeinstallation import NodeInstallationController; NodeInstallationController.setup_node(execute_rollback=True)"
    elif [ "$2" = "master" ] || [ "$2" = "extra" ] ; then
        if [ "$3" = "--rollback-on-failure" ] ; then
            python -c "from ovs.lib.nodeinstallation import NodeInstallationController; NodeInstallationController.setup_node(node_type='$2', execute_rollback=True)"
        else
            python -c "from ovs.lib.nodeinstallation import NodeInstallationController; NodeInstallationController.setup_node(node_type='$2')"
        fi
    elif [ "$2" = "promote" ] ; then
        if [ "$3" = "--rollback-on-failure" ] ; then
            python -c "from ovs.lib.nodetype import NodeTypeController; NodeTypeController.promote_or_demote_node('promote', execute_rollback=True)"
        else
            python -c "from ovs.lib.nodetype import NodeTypeController; NodeTypeController.promote_or_demote_node('promote')"
        fi
    elif [ "$2" = "demote" ] ; then
        if [ "$3" = "--rollback-on-failure" ] ; then
            python -c "from ovs.lib.nodetype import NodeTypeController; NodeTypeController.promote_or_demote_node('demote', execute_rollback=True)"
        elif [ "$#" -eq 3 ] ; then
            python -c "from ovs.lib.nodetype import NodeTypeController; NodeTypeController.promote_or_demote_node('demote', '$3')"
        else
            python -c "from ovs.lib.nodetype import NodeTypeController; NodeTypeController.promote_or_demote_node('demote')"
        fi
    else
        show_help
    fi
elif [ "$1" = "rollback" ] ; then
    if [ "$#" -eq 1 ]; then
        python -c "from ovs.lib.nodeinstallation import NodeInstallationController; NodeInstallationController.rollback_setup()"
    else
        show_help
    fi
elif [ "$1" = "update" ] ; then
    if [ "$#" -eq 2 ] ; then
        IFS=',' read -r -a components <<< "$2"
        comp_string="["
        for i in ${components[@]}; do
            if [ ${i} == ${components[-1]} ]; then
                comp_string="$comp_string'$i'"
            else
                comp_string="$comp_string'$i',"
            fi
        done
        comp_string=${comp_string}"]"

        echo 'python -c "from ovs.lib.update import UpdateController; UpdateController.execute_update('${comp_string}')" &>> /var/log/ovs/update.log;' > /tmp/update
        at -f /tmp/update now
        rm /tmp/update
    else
        show_help
    fi
elif [ "$1" = "remove" ] ; then
    if [ "$2" = "node" ] ; then
        python -c "from ovs.lib.noderemoval import NodeRemovalController; NodeRemovalController.remove_node('$3', '$4')"
    else
        show_help
    fi
elif [ "$1" = "monitor" ] ; then
    if [ "$2" = "services" ] ; then
        python -c "from ovs.extensions.services.servicefactory import ServiceFactory; ServiceFactory.get_manager().monitor_services()"
    elif [ "$2" = "heartbeat" ] ; then
        python /opt/OpenvStorage/ovs/extensions/generic/heartbeat.py
    elif [ "$2" = "mds" ] ; then
        python -c "from ovs.lib.mdsservice import MDSServiceController; MDSServiceController.monitor_mds_layout()"
    else
        show_help
    fi
elif [ "$1" = "stop" ] || [ "$1" = "start" ] ; then
    if [ "$2" = "framework" ] ; then
        if [ "$#" -eq 2 ] ; then
            python -c """
from ovs.extensions.generic.system import System
from ovs.extensions.generic.sshclient import SSHClient
from ovs.extensions.services.servicefactory import ServiceFactory
print '{0}...'.format('Starting' if '$1' == 'start' else 'Stopping')
ServiceFactory.get_manager().$1_service('watcher-framework', SSHClient(System.get_my_storagerouter(), username='root'))
print 'Done'"""
        elif [ "$#" -eq 3 ] ; then
            if [ "$3" == "all" ] ; then
                python -c """
from ovs.dal.lists.storagerouterlist import StorageRouterList
from ovs.extensions.generic.sshclient import SSHClient, UnableToConnectException
from ovs.extensions.services.servicefactory import ServiceFactory
for storagerouter in sorted(StorageRouterList.get_storagerouters(), key=lambda k: k.name):
    print '{0} on {1}...'.format('Starting' if '$1' == 'start' else 'Stopping', storagerouter.name)
    try:
        client = SSHClient(storagerouter, username='root')
    except UnableToConnectException:
        print '{0} on {1}... failed (Node unreachable)'.format('Starting' if '$1' == 'start' else 'Stopping', storagerouter.name)
        continue
    ServiceFactory.get_manager().$1_service('watcher-framework', client)
print 'Done'"""
            else
                python -c """
from ovs.dal.lists.storagerouterlist import StorageRouterList
from ovs.extensions.generic.sshclient import SSHClient, UnableToConnectException
from ovs.extensions.services.servicefactory import ServiceFactory
storagerouter = StorageRouterList.get_by_ip('$3')
if storagerouter is None:
    print 'Could not find StorageRouter with ip $3'
else:
    print '{0} on {1}...'.format('Starting' if '$1' == 'start' else 'Stopping', storagerouter.name)
    try:
        client = SSHClient(storagerouter, username='root')
        ServiceFactory.get_manager().$1_service('watcher-framework', client)
        print 'Done'
    except UnableToConnectException:
        print '{0} on {1}... failed (Node unreachable)'.format('Starting' if '$1' == 'start' else 'Stopping', storagerouter.name)"""
            fi
        else
            show_help
        fi
    else
        show_help
    fi
elif [ "$1" = "collect" ] ; then
    if [ "$2" = "logs" ] ; then
        LOGFILE=/tmp/ovs-`hostname`-`date "+%Y%m%d%H%M%S"`-logs.tar
        rm -f ${LOGFILE}
        rm -f ${LOGFILE}.gz
        journalctl -u ovs-* -u asd-* -u alba-* --no-pager > /var/log/journald.log 2>&1 || true
        touch ${LOGFILE}
        tar uvf ${LOGFILE} /var/log/arakoon* > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/nginx* > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/ovs* > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/rabbitmq* > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/upstart* > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/*log > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/dmesg* > /dev/null 2>&1
        gzip ${LOGFILE} > /dev/null
        echo ${LOGFILE}.gz
    else
        show_help
    fi
elif [ "$1" = "unittest" ] ; then
    test_unittest "$@"

elif [ "$1" = "config" ] ; then
    if [ "$2" = "edit" ] ; then
        if [ "$#" -eq 3 ] ; then
          TEMP="/tmp/$(basename $0).$$.$RANDOM.tmp"
          python -c """
from ovs.extensions.generic.configuration import Configuration
with open('$TEMP', 'w') as f:
    if Configuration.exists('$3', raw=True):
        f.write(Configuration.get('$3', raw=True))
    else:
        f.write('')
"""
          ${EDITOR:=nano} ${TEMP}
          python -c """
from ovs.extensions.generic.configuration import Configuration
with open('$TEMP', 'r') as f:
    Configuration.set('$3', f.read(), raw=True)
"""
          rm -f ${TEMP}
        else
            show_help
        fi
    elif [ "$2" = "list" ] ; then
        python -c """
from ovs.extensions.generic.configuration import Configuration
for entry in Configuration.list('$3'):
    print entry
"""
    elif [ "$2" = "list-recursive" ] ; then
        python -c """
from ovs.extensions.generic.configuration import Configuration
for entry in Configuration.list('$3', recursive=True):
    print entry
"""
    elif [ "$2" = "get" ] ; then
        python -c """
from ovs.extensions.generic.configuration import Configuration;
if Configuration.exists('$3', raw=True):
    print Configuration.get('$3', raw=True)
"""
    else
        show_help
    fi
elif [ "$1" = "local_update" ] ; then
    if [ "$2" = "alba" ] ; then
        python -c """
from ovs.update import AlbaComponentUpdater
from ovs.extensions.generic.system import System
AlbaComponentUpdater.do_update(System.get_my_machine_id(), True)
"""
    elif [ "$2" = "volumedriver" ] ; then
        python -c """
from ovs.update import VolumeDriverUpdater
from ovs.extensions.generic.system import System
VolumeDriverUpdater.do_update(System.get_my_machine_id(), True)
"""
    else
        show_help
    fi
elif [ "$#" -ge 1 ] ; then
    module=${1}
    if [ -f /opt/OpenvStorage/scripts/${module}.sh ] ; then
        shift
        /opt/OpenvStorage/scripts/${module}.sh $@
    else
        show_help
    fi
else
    ipython
fi
